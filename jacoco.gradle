// Android Gradle Plugin out of the box only supports code coverage for instrumentation espresso) tests.
// This add support for unit tests as well.
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
}

def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        'android/**/*.*',
        'com/android/**/*.class',

        //Dagger 2
        '**/*Dagger*Component*.*',
        '**/*Module.*',
        '**/*Module$*.*',
        '**/*MembersInjector*.*',
        '**/*_Factory*.*',
        '**/*Provide*Factory*.*',

        //Room
        '**/AppDatabase.class',

        //Classes I intentionally don't want to test
        '**/api/*',
        '**/di/*.*',
        '**/models/*',
        '**/*Activity.*',
        '**/*Fragment.*',
        '**/*Adapter.*',
        '**/*ViewHolder*.*',
        '**/extension/*.*',
        '**/factory/*.*',
        '**/utils/*.*',
        '**/mappers/*.*',
        '**/*Application.class',
]

task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    final def coverageSourceDirs = [
            "$projectDir/src/main/java",
            "$projectDir/src/main/kotlin",
    ]

    classDirectories.from = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = fileTree(
            dir: project.buildDir,
            includes: ['jacoco/testDebugUnitTest.exec']
    )

    reports {
        csv.enabled = false
        xml.enabled = false
        html {
            enabled true
            destination file("$buildDir/coverage-report")
        }
    }
}
